# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è
import random
from discord.ext import commands
import discord
from discord.ext.commands import Bot
import discord.utils
import requests
import youtube_dl
import sqlite3
from translate import Translator
import datetime
import os
import json
# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è


dashes = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']
TOKEN = "—Ç–æ–∫–µ–Ω"
ban_words = ["–ø–æ–ª–∏—Ç–∏–∫–∞", "–º–∞—á—É-–ø–∏–∫—á—É", "—á–∏—Ö—É–∞-—Ö—É–∞"]
support = ["–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º", "–ú–æ–ª–æ–¥–µ—Ü", "–Æ—é—é—é—Ö—É—É—É—É—É"]
# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è
hello = ['–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é', '–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –¥–ª—è', 'Hello']


def parse_city_json(json_file='russia.json'):
    p_obj = None
    try:
        js_obj = open(json_file, "r", encoding="utf-8")
        p_obj = json.load(js_obj)
    except Exception as err:
        print(err)
        return None
    finally:
        js_obj.close()
    return [city['city'].lower() for city in p_obj]


def get_city(city):
    normilize_city = city.strip().lower()[1:]
    if is_correct_city_name(normilize_city):
        if is_correct_city(normilize_city):
            if get_city.previous_city != "" and normilize_city[0] != get_city.previous_city[-1]:
                return '–ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ "{0}" ü•¥'.format(get_city.previous_city[-1])

            if normilize_city not in cities_already_named:
                cities_already_named.append(normilize_city)
                last_latter_city = normilize_city[-1]
                proposed_names = list(filter(lambda x: x[0] == last_latter_city, cities))
                if proposed_names:
                    for city in proposed_names:
                        if city not in cities_already_named:
                            cities_already_named.append(city)
                            get_city.previous_city = city
                            return city.capitalize()
                return '–Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–∞ –Ω–∞ —ç—Ç—É –±—É–∫–≤—Éüòî. –¢—ã –≤—ã–∏–≥—Ä–∞–ªü•≥'
            else:
                return '–ì–æ—Ä–æ–¥ —É–∂–µ –±—ã–ªü•¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'
        else:
            return '–ü—Ä–æ—Å—Ç–∏ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞üòì –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –≥–æ—Ä–æ–¥–æ–º –†–æ—Å—Å–∏–∏'
    else:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ü•¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'


get_city.previous_city = ""
cities = parse_city_json()[:3500]
cities_already_named = []
gamestart = [0]


def is_correct_city_name(city):
    return city[-1].isalpha() and city[-1] not in ('—å', '—ä')


def is_correct_city(city):
    a = False
    for i in cities:
        if city.lower() == i.lower():
            a = True
            break
    return a
# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è


class Multi_Bot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è
    @commands.Cog.listener()
    async def on_message(self, message):
        for i in ban_words:
            if i in message.content.lower():
                await message.delete()
                await message.channel.send(f'{str(message.author)} –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ '
                                           f'–∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞ü§¨\n–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±–æ–ª—å—à–µ'
                                           f' –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ü§ê')
        if "—É—Ä–∞" in message.content.lower():
            await message.channel.send(random.choice(support))
        if '–ø—Ä–∏–≤–µ—Ç' in message.content.lower():
            if message.author != bot.user:
                await message.channel.send(f'{random.choice(hello)} {str(message.author)}')
        if gamestart[0] == 1:
            if message.content.startswith('!'):
                response = get_city(message.content)
                await message.channel.send(response)

    @commands.command(name='game_city')
    async def game_city(self, ctx, *arg):
        gamestart.append(1)
        del gamestart[0]
        await ctx.send('–Ø –æ—á–µ–Ω—å –ª—é–±–ª—é –∏–≥—Ä—ã! –û–¥–Ω–æ–π –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —è–≤–ª—è–µ—Ç—Å—è Doom, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç'
                       ' –∏ –Ω–µ –º–æ–≥—É –≤ –Ω–µ—ë –∏–≥—Ä–∞—Ç—å. –ù–æ –º—ã –º–æ–∂–µ–º —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–∞. –ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ, –¥—É–º–∞—é'
                       ' —Ç—ã –∏—Ö –∑–Ω–∞–µ—à—å. –¢–æ–ª—å–∫–æ —è —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –ø–∞—Ä—É —É—Å–ª–æ–≤–Ω–æ—Å—Ç–µ–π. –í—Å–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å'
                       ' –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ —è–≤–ª—è—Ç—å—Å—è –≥–æ—Ä–æ–¥–∞–º–∏ –†–æ—Å—Å–∏–∏ –º–∞—Ç—É—à–∫–∏. '
                       '–ù–µ–ª—å–∑—è –¥–≤–∞–∂–¥—ã –Ω–∞–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥. –ï—Å–ª–∏'
                       ' —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞, —Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É -restart, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä–∞—Ç—å'
                       ' –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É -stop_city')
        await ctx.send('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É, —Ç—ã –ø–µ—Ä–≤—ã–π')

    @commands.command(name='restart')
    async def restart(self, ctx, *arg):
        cities = parse_city_json()[:3500]
        cities_already_named.clear()
        get_city.previous_city = ""
        await ctx.send('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ, —Ç—ã –ø–µ—Ä–≤—ã–π')

    @commands.command(name='stop_city')
    async def stop_city(self, ctx, *arg):
        gamestart.append(0)
        del gamestart[0]
        cities = parse_city_json()[:3500]
        cities_already_named.clear()
        get_city.previous_city = ""
        await ctx.send('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –±—ã–ª–æ –≤–µ—Å–µ–ª–æü§™')
    @commands.command(aliases=["g"])
    async def game(self, ctx, *args):
        print(len(args), args)
        if len(args) != 0:
            genre = " ".join(args).lower()
            con = sqlite3.connect("data/tabels/games.db")
            cur = con.cursor()
            result = cur.execute(f"SELECT id FROM genres WHERE genre LIKE '%{genre}%'").fetchall()
            if len(result) != 0:
                games = cur.execute(f"SELECT * FROM games WHERE genre_id = {result[0][0]}").fetchall()
                game = random.randint(0, len(games))
                for i in range(1, len(games[game])):
                    if i == 2:
                        pass
                    else:
                        await ctx.send(games[game][i])
                cur.close()
            else:
                games = cur.execute(f"SELECT * FROM games").fetchall()
                game = random.randint(0, len(games))
                await ctx.send("–ò–∑–≤–∏–Ω–∏—Ç–µ —É –Ω–∞—Å –Ω–µ—Ç –∏–≥—Ä—ã –≤ —Ç–∞–∫–æ–º –∂–∞–Ω—Ä–µ üòû")
                await ctx.send("‚ùó_–ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:_‚ùó")
                for i in range(1, len(games[game])):
                    if i == 1:
                        await ctx.send(f'`{games[game][i]}`')
                    elif i == 2:
                        pass
                    else:
                        await ctx.send(games[game][i])
                cur.close()
        else:
            con = sqlite3.connect("data/tabels/games.db")
            cur = con.cursor()
            games = cur.execute(f"SELECT * FROM games").fetchall()
            game = random.randint(0, len(games))
            await ctx.send("‚ùó_–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å_‚ùó(–Ω–∞–¥–µ–µ–º—Å—è –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è):")
            for i in range(1, len(games[game])):
                if i == 1:
                    await ctx.send(f'`{games[game][i]}`')
                elif i == 2:
                    pass
                else:
                    await ctx.send(games[game][i])
            cur.close()

    @commands.command(aliases=["b"])
    async def book(self, ctx, *args):
        print(len(args), args)
        if len(args) != 0:
            genre = " ".join(args).lower()
            con = sqlite3.connect("data/tabels/books.db")
            cur = con.cursor()
            result = cur.execute(f"SELECT id FROM genres WHERE genre LIKE '%{genre}%'").fetchall()
            if len(result) != 0:
                books = cur.execute(f"SELECT * FROM books WHERE genre_id = {result[0][0]}").fetchall()
                book = random.randint(0, len(books))
                for i in range(1, len(books[book])):
                    if i == 2:
                        pass
                    else:
                        await ctx.send(books[book][i])
                cur.close()
            else:
                books = cur.execute(f"SELECT * FROM books").fetchall()
                book = random.randint(0, len(books))
                await ctx.send("–ò–∑–≤–∏–Ω–∏—Ç–µ —É –Ω–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥–∏ –≤ —Ç–∞–∫–æ–º –∂–∞–Ω—Ä–µ üòû")
                await ctx.send("‚ùó_–ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:_‚ùó")
                for i in range(1, len(books[book])):
                    if i == 1:
                        await ctx.send(f'`{books[book][i]}`')
                    elif i == 2:
                        pass
                    else:
                        await ctx.send(books[book][i])
                cur.close()
        else:
            con = sqlite3.connect("data/tabels/books.db")
            cur = con.cursor()
            books = cur.execute(f"SELECT * FROM books").fetchall()
            book = random.randint(0, len(books))
            await ctx.send("‚ùó_–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å_‚ùó(–Ω–∞–¥–µ–µ–º—Å—è –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è):")
            for i in range(1, len(books[book])):
                if i == 1:
                    await ctx.send(f'`{books[book][i]}`')
                elif i == 2:
                    pass
                else:
                    await ctx.send(books[book][i])
            cur.close()

# –¢—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è

    @commands.command(name='help1', aliases=["h"])
    async def help1(self, ctx, *arg):
        await ctx.send(str(ctx.message.author) + "\u2680")

    @commands.command(name='roll_dice')
    async def roll_dice(self, ctx, count, *arg):
        if len(arg) != 0:
            await ctx.send("–õ–∏—à–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç")
        else:
            res = [random.choice(dashes) for _ in range(int(count))]
            await ctx.send(" ".join(res))

    @commands.command(name='cat')
    async def cat(self, ctx, *arg):
        if len(arg) != 0:
            await ctx.send("–õ–∏—à–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç")
        else:
            response = requests.get("https://api.thecatapi.com/v1/images/search")
            data = response.json()
            await ctx.send(data[0]['url'])

    @commands.command(name='dog')
    async def dog(self, ctx, *arg):
        if len(arg) != 0:
            await ctx.send("–õ–∏—à–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç")
        else:
            response = requests.get("https://dog.ceo/api/breeds/image/random")
            data = response.json()
            await ctx.send(data['message'])


    @commands.command(aliases=['p'])
    async def play(self, ctx, url: str):
        song_there = os.path.isfile("song.mp3")
        try:
            if song_there:
                os.remove("song.mp3")
        except PermissionError:
            await ctx.send("Wait for the current playing music to end or use the 'stop' command")
            return

        voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if voice is None:
            voiceChannel = discord.utils.get(ctx.guild.voice_channels, name='Music')
            await voiceChannel.connect()
            voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)

        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        for file in os.listdir("./"):
            if file.endswith(".mp3"):
                os.rename(file, "song.mp3")
        voice.play(discord.FFmpegPCMAudio("song.mp3"))

    @commands.command(aliases=["ps"])
    async def pause(self, ctx):
        voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if voice.is_playing():
            voice.pause()
        else:
            await ctx.send("Currently no audio is playing.")

    @commands.command(aliases=["r"])
    async def resume(self, ctx):
        voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if voice.is_paused():
            voice.resume()
        else:
            await ctx.send("The audio is not paused.")

    @commands.command(aliases=["s"])
    async def stop(self, ctx):
        voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        voice.stop()

    @commands.command(aliases=["q"])
    async def quit(self, ctx):
        voice = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if voice.is_connected():
            await voice.disconnect()
        else:
            await ctx.send("The bot is not connected to a voice channel.")

    @commands.command(aliases=["us"])
    async def usless(self, ctx):
        id = random.randint(1, 10)
        con = sqlite3.connect("data/tabels/useless_site.db")
        cur = con.cursor()
        result = cur.execute(f"SELECT url FROM useless WHERE id = {id}").fetchall()
        for elem in result:
            await ctx.send(str(elem[0]))
        con.close()

    @commands.command(aliases=["a_r"])
    async def add_rang(self, ctx, *arg):
        con = sqlite3.connect("data/tabels/rangs.db")
        cur = con.cursor()
        result = cur.execute(
            f"SELECT login FROM logins WHERE rang_id = (SELECT id FROM rangs WHERE rang LIKE 'admin')"
        ).fetchall()
        admins = []
        for elem in result:
            admins.append(elem[0])
        print(str(ctx.message.author), admins)
        do_comand = True
        if str(ctx.message.author) in admins:
            if len(arg) == 1:
                await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã(–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)")
                return
            for i in range(len(arg)):
                if "#" in arg[i]:
                    login = " ".join(arg[:i + 1])
                    print(login)
                    newrang = str(arg[i + 1])
                    if len(arg) > i + 2:
                        do_comand = False
            print(newrang)
            result = cur.execute(
                f"SELECT id FROM rangs WHERE rang LIKE '{newrang}'"
            ).fetchall()
            if len(result) == 0:
                await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã(–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–Ω–≥)")
                return
            result = cur.execute(
                f"SELECT login FROM logins WHERE rang_id = (SELECT id FROM rangs WHERE rang LIKE '{newrang}')"
            ).fetchall()
            print(result)
            rang_users = []
            for elem in result:
                rang_users.append(elem[0])
            if login in rang_users:
                await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã(—É —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥)")
                return
            result = cur.execute(
                f"SELECT id FROM logins WHERE login = '{login}'"
            ).fetchall()
            if len(result) != 0:
                cur.execute(f"""UPDATE logins SET rang_id = (SELECT id FROM rangs WHERE rang = '{newrang}')
                            WHERE login = '{login}'""").fetchall()
                con.commit()
                con.close()
                await ctx.send("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ)")
                return
            if do_comand:
                rang_id = cur.execute(f"SELECT id FROM rangs WHERE rang = '{newrang}'").fetchall()
                if len(rang_id) == 1:
                    cur.execute(f"INSERT INTO logins (login, rang_id) VALUES ('{login}', {rang_id[0][0]})")
                    con.commit()
                    await ctx.send("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ)")
                else:
                    await ctx.send("–í–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–Ω–≥")
            else:
                await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã(–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)")
        else:
            await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã ü§î")
        con.close()

    @commands.command(aliases=["en"])
    async def en_ru(self, ctx, *args):
        txt = str(" ".join(args))
        translator = Translator(to_lang="Russian")
        translation = translator.translate(txt)
        await ctx.send(translation)

    @commands.command(aliases=["ru"])
    async def ru_en(self, ctx, *args):
        try:
            txt = str(" ".join(args))
            translator = Translator(from_lang="Russian", to_lang="English")
            translation = translator.translate(txt)
            await ctx.send(translation)
        except:
            await ctx.send("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.üòî")
            await ctx.send("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø–µ—Ä–µ–≤–æ –¥–∏—Ç–µ –Ω–µ —Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")

    @commands.command(aliases=["t"])
    async def timer(self, ctx, *args):
        try:
            time = ''.join(args).lower()
            if ':' in time:
                t = time.split(":")
                hours = t[0]
                minutes = t[1]
                while True:
                    if int(datetime.datetime.now().strftime("%H")) == int(hours)\
                            and int(datetime.datetime.now().strftime("%M")) == int(minutes):
                        await ctx.send(f'‚è∞ Time X has come!')
                        break

            else:
                hours = int(time.split('hours')[0])
                minutes = int(time.split('hours')[1].split('minutes')[0])
                flag = True
                time_now = datetime.datetime.now()
                await ctx.send(f'The timer should start in {hours} hours and {minutes} minutes.')
                if flag:
                    while True:
                        delta = datetime.datetime.now() - time_now
                        if delta.seconds >= hours * 3600 + minutes * 60:
                            hours, minutes, flag = 0, 0, False
                            time = None
                            break
                    await ctx.send(f'‚è∞ Time X has come!')
        except:
            await ctx.send(f'–ö–æ–º–∞–Ω–¥—ã –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòû')
            await ctx.send(f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π `-help_game`, —á—Ç–æ–±—ã —Å–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å')

    @commands.command(pass_context=True)
    async def kick(self, ctx, user: discord.Member, reason=None):
        try:
            con = sqlite3.connect("data/tabels/rangs.db")
            cur = con.cursor()
            result = cur.execute(
                f"SELECT login FROM logins WHERE rang_id = (SELECT id FROM rangs WHERE rang LIKE 'admin')"
            ).fetchall()
            admins = []
            for elem in result:
                admins.append(elem[0])
            if str(ctx.message.author) in admins:
                await user.kick(reason=reason)
                await ctx.send(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É–ª–∏ {user} üòû")
            else:
                await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üòï')
        except:
            await ctx.send(f'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü§î')

    @commands.command()
    async def ban(self, ctx, user: discord.Member, *reason):
        try:
            con = sqlite3.connect("data/tabels/rangs.db")
            cur = con.cursor()
            result = cur.execute(
                f"SELECT login FROM logins WHERE rang_id = (SELECT id FROM rangs WHERE rang LIKE 'admin')"
            ).fetchall()
            admins = []
            for elem in result:
                admins.append(elem[0])
            if str(ctx.message.author) in admins:
                await user.ban(reason=" ".join(reason))
                await ctx.send(f"{user} –±—ã–ª __—É—Å–ø–µ—à–Ω–æ__ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòû")
            else:
                await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üòï')
        except:
            await ctx.send(f'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü§î')

    @commands.command()
    async def unban(self, ctx, user: discord.Member):
        try:
            con = sqlite3.connect("data/tabels/rangs.db")
            cur = con.cursor()
            result = cur.execute(
                f"SELECT login FROM logins WHERE rang_id = (SELECT id FROM rangs WHERE rang LIKE 'admin')"
            ).fetchall()
            admins = []
            for elem in result:
                admins.append(elem[0])
            if str(ctx.message.author) in admins:
                await user.unban()
                await ctx.send(f"–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è{user} –±—ã–ª __—É—Å–ø–µ—à–Ω–æ__ –≤—ã–ø–æ–ª–Ω–µ–Ω üëè")
            else:
                await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üòï')
        except:
            await ctx.send(f'–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω üòâ')

    @commands.command(aliases=["g"])
    async def game(self, ctx, *args):
        print(len(args), args)
        if len(args) != 0:
            genre = " ".join(args).lower()
            con = sqlite3.connect("data/tabels/games.db")
            cur = con.cursor()
            result = cur.execute(f"SELECT id FROM genres WHERE genre LIKE '%{genre}%'").fetchall()
            if len(result) != 0:
                games = cur.execute(f"SELECT * FROM games WHERE genre_id = {result[0][0]}").fetchall()
                game = random.randint(0, len(games))
                for i in range(1, len(games[game])):
                    if i == 2:
                        pass
                    else:
                        await ctx.send(games[game][i])
                cur.close()
            else:
                games = cur.execute(f"SELECT * FROM games").fetchall()
                game = random.randint(0, len(games))
                await ctx.send("–ò–∑–≤–∏–Ω–∏—Ç–µ —É –Ω–∞—Å –Ω–µ—Ç –∏–≥—Ä—ã –≤ —Ç–∞–∫–æ–º –∂–∞–Ω—Ä–µ üòû")
                await ctx.send("‚ùó__–ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:__‚ùó")
                for i in range(1, len(games[game])):
                    if i == 1:
                        await ctx.send(f'`{games[game][i]}`')
                    elif i == 2:
                        pass
                    else:
                        await ctx.send(games[game][i])
                cur.close()
        else:
            con = sqlite3.connect("data/tabels/games.db")
            cur = con.cursor()
            games = cur.execute(f"SELECT * FROM games").fetchall()
            game = random.randint(0, len(games))
            await ctx.send("‚ùó__–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å__‚ùó(–Ω–∞–¥–µ–µ–º—Å—è –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è):")
            for i in range(1, len(games[game])):
                if i == 1:
                    await ctx.send(f'`{games[game][i]}`')
                elif i == 2:
                    pass
                else:
                    await ctx.send(games[game][i])
            cur.close()


bot = commands.Bot(command_prefix='-')
bot.add_cog(Multi_Bot(bot))
bot.run(TOKEN)
